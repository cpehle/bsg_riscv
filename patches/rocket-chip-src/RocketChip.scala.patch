diff --git a/src/main/scala/RocketChip.scala b/src/main/scala/RocketChip.scala
index bdbde9c..be9896c 100644
--- a/src/main/scala/RocketChip.scala
+++ b/src/main/scala/RocketChip.scala
@@ -43,6 +43,7 @@ trait HasTopLevelParameters {
   implicit val p: Parameters
   lazy val useDma = p(UseDma)
   lazy val nTiles = p(NTiles)
+	lazy val usingRocc = !p(BuildRoCC).isEmpty
   lazy val nCachedTilePorts = p(TLKey("L1toL2")).nCachingClients
   lazy val nUncachedTilePorts =
     p(TLKey("L1toL2")).nCachelessClients - (if (useDma) 2 else 1)
@@ -82,6 +83,12 @@ class TopIO(implicit p: Parameters) extends BasicTopIO()(p) {
   val mem = Vec(nMemChannels, new NastiIO)
 }
 
+class RocketChipTopIO(implicit p: Parameters) extends TopIO()(p) {
+  val rocc = Vec(nTiles,Vec(p(BuildRoCC).size,new RoCCInterface()(p.alterPartial({
+          case TLId => "L1toL2"
+  		  }))).flip)
+}
+
 object TopUtils {
   // Connect two Nasti interfaces with queues in-between
   def connectNasti(outer: NastiIO, inner: NastiIO)(implicit p: Parameters) {
@@ -99,12 +106,35 @@ object TopUtils {
 class Top(topParams: Parameters) extends Module with HasTopLevelParameters {
   implicit val p = topParams
   val io = new TopIO
+	val rocketChipTop = Module(new RocketChipTop()(p))
+	io.mem <> rocketChipTop.io.mem
+  io.host <> rocketChipTop.io.host
+  if (p(UseBackupMemoryPort)) { io.mem_backup_ctrl <> rocketChipTop.io.mem_backup_ctrl }
+	
+	if(usingRocc) {
+	  for (i <- 0 until nTiles) {
+  		p(BuildRoCC).zipWithIndex.map { case (accelParams, j) =>
+  		  val rocc = accelParams.generator(p.alterPartial({
+          case RoccNMemChannels => accelParams.nMemChannels
+  		    case RoccNPTWPorts => accelParams.nPTWPorts
+  		    case RoccNCSRs => accelParams.csrs.size
+          case TLId => "L1toL2"
+  		  }))
+				rocketChipTop.io.rocc(i)(j) <> rocc.io
+  		}
+		}
+	}
+
+}
+
+class RocketChipTop(implicit val p: Parameters) extends Module with HasTopLevelParameters {
+  val io = new RocketChipTopIO
 
   // Build an Uncore and a set of Tiles
   val innerTLParams = p.alterPartial({case TLId => "L1toL2" })
   val uncore = Module(new Uncore()(innerTLParams))
   val tileList = uncore.io.htif zip p(BuildTiles) map { case(hl, bt) => bt(hl.reset, p) }
-
+	
   // Connect each tile to the HTIF
   uncore.io.htif.zip(tileList).zipWithIndex.foreach {
     case ((hl, tile), i) =>
@@ -113,9 +143,15 @@ class Top(topParams: Parameters) extends Module with HasTopLevelParameters {
       tile.io.host.csr.req <> Queue(hl.csr.req)
       hl.csr.resp <> Queue(tile.io.host.csr.resp)
       hl.debug_stats_csr := tile.io.host.debug_stats_csr
+			if(usingRocc) {
+					//tile.io.rocc <> io.rocc(i)
+        for(j <- 0 until p(BuildRoCC).size) {
+					tile.io.rocc(j) <> io.rocc(i)(j)
+        }
+			}
   }
 
-  // Connect the uncore to the tile memory ports, HostIO and MemIO
+	// Connect the uncore to the tile memory ports, HostIO and MemIO
   uncore.io.tiles_cached <> tileList.map(_.io.cached).flatten
   uncore.io.tiles_uncached <> tileList.map(_.io.uncached).flatten
   io.host <> uncore.io.host
